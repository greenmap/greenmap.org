<?php

/**
 * @file
 * Tests for options_table.module.
 */

/**
 * Class OptionsTableWidgetsTestCase
 */
class OptionsTableWidgetsTestCase extends FieldTestCase {

  /**
   * Declares the test class definition.
   *
   * @return array
   *   The test class definition.
   */
  public static function getInfo() {
    return array(
      'name'  => 'Options Table widgets',
      'description'  => "Test the Options widgets.",
      'group' => 'Field types',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('field_test', 'list_test', 'options_table');

    // Field with cardinality 1.
    $this->card_1 = array(
      'field_name' => 'card_1',
      'type' => 'list_integer',
      'cardinality' => 1,
      'settings' => array(
        // Make sure that 0 works as an option.
        'allowed_values' => array(
          0 => 'Zero',
          1 => 'One',
          2 => 'Some <script>dangerous</script> & unescaped <strong>markup</strong>',
          3 => 'Some HTML encoded markup with &lt; &amp; &gt;',
        ),
      ),
    );
    $this->card_1 = field_create_field($this->card_1);

    // Field with cardinality 2.
    $this->card_2 = array(
      'field_name' => 'card_2',
      'type' => 'list_integer',
      'cardinality' => 2,
      'settings' => array(
        // Make sure that 0 works as an option.
        'allowed_values' => array(
          0 => 'Zero',
          1 => 'One',
          2 => 'Some <script>dangerous</script> & unescaped <strong>markup</strong>',
        ),
      ),
    );
    $this->card_2 = field_create_field($this->card_2);

    // Create a web user.
    $this->web_user = $this->drupalCreateUser(array(
      'access field_test content',
      'administer field_test content',
      'administer fields',
    ));
    $this->drupalLogin($this->web_user);
  }

  /**
   * Tests the 'options_buttons' widget (single select).
   */
  public function testRadioButtons() {
    // Create an instance of the 'single value' field.
    $instance = array(
      'field_name' => $this->card_1['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'options_table',
      ),
    );
    $instance = field_create_instance($instance);
    $langcode = LANGUAGE_NONE;

    // Create an entity.
    $entity_init = field_test_create_stub_entity();
    $entity = clone $entity_init;
    $entity->is_new = TRUE;
    field_test_entity_save($entity);

    // With no field data, no buttons are checked.
    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertNoFieldChecked("edit-card-1-$langcode-table-elements-enabled-0");
    $this->assertNoFieldChecked("edit-card-1-$langcode-table-elements-enabled-1");
    $this->assertNoFieldChecked("edit-card-1-$langcode-table-elements-enabled-2");
    $this->assertRaw('Some dangerous &amp; unescaped <strong>markup</strong>', 'Option text was properly filtered.');

    // Select first option.
    $edit = array("card_1[$langcode][table][elements][enabled]" => 0);
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertFieldValues($entity_init, 'card_1', $langcode, array(0));

    // Check that the selected button is checked.
    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertFieldChecked("edit-card-1-$langcode-table-elements-enabled-0");
    $this->assertNoFieldChecked("edit-card-1-$langcode-table-elements-enabled-1");
    $this->assertNoFieldChecked("edit-card-1-$langcode-table-elements-enabled-2");

    // Unselect option.
    $edit = array("card_1[$langcode][table][elements][enabled]" => '_none');
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertFieldValues($entity_init, 'card_1', $langcode, array());

    // Check that required radios with one option is auto-selected.
    $this->card_1['settings']['allowed_values'] = array(99 => 'Only allowed value');
    field_update_field($this->card_1);
    $instance['required'] = TRUE;
    field_update_instance($instance);
    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertFieldChecked("edit-card-1-$langcode-table-elements-enabled-99");
  }

  /**
   * Tests the 'options_buttons' widget (multiple select).
   */
  public function testCheckBoxes() {
    // Create an instance of the 'multiple values' field.
    $instance = array(
      'field_name' => $this->card_2['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'options_table',
      ),
    );
    $instance = field_create_instance($instance);
    $langcode = LANGUAGE_NONE;

    // Create an entity.
    $entity_init = field_test_create_stub_entity();
    $entity = clone $entity_init;
    $entity->is_new = TRUE;
    field_test_entity_save($entity);

    // Display form: with no field data, nothing is checked.
    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertNoFieldChecked("edit-card-2-$langcode-table-elements-0-enabled");
    $this->assertNoFieldChecked("edit-card-2-$langcode-table-elements-1-enabled");
    $this->assertNoFieldChecked("edit-card-2-$langcode-table-elements-2-enabled");
    $this->assertRaw('Some dangerous &amp; unescaped <strong>markup</strong>', 'Option text was properly filtered.');

    // Submit form: select first and third options.
    $edit = array(
      "card_2[$langcode][table][elements][0][enabled]" => TRUE,
      "card_2[$langcode][table][elements][1][enabled]" => FALSE,
      "card_2[$langcode][table][elements][2][enabled]" => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertFieldValues($entity_init, 'card_2', $langcode, array(0, 2));

    // Display form: check that the right options are selected.
    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-0-enabled");
    $this->assertNoFieldChecked("edit-card-2-$langcode-table-elements-1-enabled");
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-2-enabled");

    // Submit form: select only first option.
    $edit = array(
      "card_2[$langcode][table][elements][0][enabled]" => TRUE,
      "card_2[$langcode][table][elements][1][enabled]" => FALSE,
      "card_2[$langcode][table][elements][2][enabled]" => FALSE,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertFieldValues($entity_init, 'card_2', $langcode, array(0));

    // Display form: check that the right options are selected.
    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-0-enabled");
    $this->assertNoFieldChecked("edit-card-2-$langcode-table-elements-1-enabled");
    $this->assertNoFieldChecked("edit-card-2-$langcode-table-elements-2-enabled");

    // Submit form: select the three options while the field accepts only 2.
    $edit = array(
      "card_2[$langcode][table][elements][0][enabled]" => TRUE,
      "card_2[$langcode][table][elements][1][enabled]" => TRUE,
      "card_2[$langcode][table][elements][2][enabled]" => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText('this field cannot hold more than 2 values', 'Validation error was displayed.');

    // Submit form: uncheck all options.
    $edit = array(
      "card_2[$langcode][table][elements][0][enabled]" => FALSE,
      "card_2[$langcode][table][elements][1][enabled]" => FALSE,
      "card_2[$langcode][table][elements][2][enabled]" => FALSE,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    // Check that the value was saved.
    $this->assertFieldValues($entity_init, 'card_2', $langcode, array());

    // Required checkbox with one option is auto-selected.
    $this->card_2['settings']['allowed_values'] = array(99 => 'Only allowed value');
    field_update_field($this->card_2);
    $instance['required'] = TRUE;
    field_update_instance($instance);
    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-99-enabled");
  }

  /**
   * Tests the 'options_buttons' widget (multiple select).
   */
  public function testCheckBoxesWeight() {
    // Create an instance of the 'multiple values' field.
    $instance = array(
      'field_name' => $this->card_2['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'options_table',
      ),
    );
    $instance = field_create_instance($instance);
    $langcode = LANGUAGE_NONE;

    // Create an entity.
    $entity_init = field_test_create_stub_entity();
    $entity = clone $entity_init;
    $entity->is_new = TRUE;
    field_test_entity_save($entity);

    // Display form: with no field data, nothing is checked.
    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');

    // Submit form: select first and third options.
    $edit = array(
      "card_2[$langcode][table][elements][0][enabled]" => TRUE,
      "card_2[$langcode][table][elements][1][enabled]" => FALSE,
      "card_2[$langcode][table][elements][2][enabled]" => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertFieldValues($entity_init, 'card_2', $langcode, array(0, 2));

    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertOptionSelected('edit-card-2-und-table-elements-0-weight', 0);
    $this->assertOptionSelected('edit-card-2-und-table-elements-2-weight', 1);
    $this->assertOptionSelected('edit-card-2-und-table-elements-1-weight', 2);
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-0-enabled");
    $this->assertNoFieldChecked("edit-card-2-$langcode-table-elements-1-enabled");
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-2-enabled");

    // Change delta sorting.
    $edit = array(
      "card_2[$langcode][table][elements][2][weight]" => -1,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertFieldValues($entity_init, 'card_2', $langcode, array(2, 0));

    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertOptionSelected('edit-card-2-und-table-elements-2-weight', 0);
    $this->assertOptionSelected('edit-card-2-und-table-elements-0-weight', 1);
    $this->assertOptionSelected('edit-card-2-und-table-elements-1-weight', 2);
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-0-enabled");
    $this->assertNoFieldChecked("edit-card-2-$langcode-table-elements-1-enabled");
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-2-enabled");

    // Changes options and sorting at the same time.
    $edit = array(
      "card_2[$langcode][table][elements][0][enabled]" => TRUE,
      "card_2[$langcode][table][elements][1][enabled]" => TRUE,
      "card_2[$langcode][table][elements][2][enabled]" => FALSE,
      "card_2[$langcode][table][elements][2][weight]" => -10,
      "card_2[$langcode][table][elements][1][weight]" => -5,
    );

    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertFieldValues($entity_init, 'card_2', $langcode, array(1, 0));

    $this->drupalGet('test-entity/manage/' . $entity->ftid . '/edit');
    $this->assertOptionSelected('edit-card-2-und-table-elements-1-weight', 0);
    $this->assertOptionSelected('edit-card-2-und-table-elements-0-weight', 1);
    $this->assertOptionSelected('edit-card-2-und-table-elements-2-weight', 2);
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-0-enabled");
    $this->assertFieldChecked("edit-card-2-$langcode-table-elements-1-enabled");
    $this->assertNoFieldChecked("edit-card-2-$langcode-table-elements-2-enabled");
  }

}
